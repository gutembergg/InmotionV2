

Pas effacer!!!!!

./node_modules/postfinancecheckout/src/api/ApplicationUserService.ts:3:1
Type error: Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from "mod"', 'im
port {a} from "mod"', 'import d from "mod"', or another module format instead.

  1 | 'use strict';
  2 |
> 3 | import localVarRequest = require("request");
    | ^
  4 | import http = require("http");
  5 | import Promise = require("bluebird");
  6 |
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.


  "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],

     typescript: {
    
    ignoreBuildErrors: true,
  },

    {/* <li className="products_list" key={product.id}>
                          <button
                            className="closeButton"
                            onClick={() => removeCartItem(product.id)}
                          ></button>
                          <div className="cartProductInfos">
                            <h5>{product.name}</h5>
                            <p>
                              {product.qty}x CHF {product.price}
                            </p>
                          </div>
                          <div className="cartProductThmbnail">
                            <Image
                              src={product.images[0].src}
                              alt={product.name}
                              height={50}
                              width={50}
                            />
                          </div>
                        </li> */}






        /*  if (response.body.state === "AUTHORIZED") {
          console.log(`response.AUTHORIZED:${orderID}`, response.body.state);
          updateOrder(Number(orderID), "on-hold")
            .then((resp) => {
              console.log("Resp====>", resp);

              return res.status(200).json({ Message: "Order Authorized!" });
            })
            .catch((error) => {
              return res.status(200).json({ Error: "Internal error" });
            });
        } else if (response.body.state === "FULFILL") {
          console.log(`response.FULFILL:${orderID}`, response.body.state);
          updateOrder(Number(orderID), "completed")
            .then((resp) => {
              console.log("Resp====>", resp);
              return res.status(200).json({ Message: "Order Completed!" });
            })
            .catch((error) => {
              return res.status(200).json({ Error: "Internal error" });
            });
        } else if (response.body.state === "FAILED") {
          console.log(`response.FAILED:${orderID}`, response.body.state);

          updateOrder(Number(orderID), "failed")
            .then((response) => {
              return res.status(200).json({ Message: "Order Failed!" });
            })
            .catch((error) => {
              return res.status(200).json({ Error: "Internal error" });
            });
        } else if (response.body.state === "DECLINE") {
          console.log(`response.DECLINE:${orderID}`, response.body.state);

          updateOrder(Number(orderID), "cancelled")
            .then((response) => {
              return res.status(200).json({ Message: "Order Cancelled!" });
            })
            .catch((error) => {
              return res.status(200).json({ Error: "Internal error" });
            });
        } else {
          return res.status(200).json(response.body);
        } */


                        
  